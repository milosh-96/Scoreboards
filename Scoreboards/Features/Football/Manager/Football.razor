@page "/manager/football"
@using Microsoft.AspNetCore.SignalR.Client;
@using Scoreboards.Features.Football
@using Scoreboards.Features.Football.Manager
@using Scoreboards.Features.Football.Output;
@using Scoreboards.Data.Football;
@implements IDisposable;
@inject NavigationManager Navigation
<PageTitle>Operator Panel, Football - @SiteInfo.Name</PageTitle>
<div class="container mb-3">
    <div class="alert alert-warning">
        Do not close this tab/window. Closing of this tab/window will stop all outputs
        with current token. All entered data will be lost as well! 
    </div>
   
    <div>
        <h3>Football</h3>

        <div class="row">
            <div class="col">
                <div class="input-group">
                    <select class="form-control" @bind="ViewModel.LayoutPreset">
                        <option value="1">Layout Preset 1</option>
                        <option value="2">Layout Preset 2 (Anfield-like)</option>
                        <option value="3">Layout Preset 3 (Bayern stadium-like)</option>
                    </select>
                </div>
                <!-- Button trigger modal -->
                <button type="button" class="btn btn-sm btn-secondary my-1" data-bs-toggle="modal" data-bs-target="#layoutOptions">
                    Layout Options
                </button><p></p>
                
            </div>
            <div class="col">
                <a class="btn btn-primary mx-1" href="/scoreboard/football/@ConnectionToken" target="_blank">Open Output</a>
                @if (dataSyncTimer != null)
                {
                    <button class="btn btn-sm btn-warning" @onclick="()=>{dataSyncTimer.Dispose();dataSyncTimer=null;}">Pause Output Syncing</button>
                }
                else
                {
                    <button class="btn btn-sm btn-success" @onclick="()=>SetupDataSyncTimer()">Start Output Syncing</button>
                }
            </div>
        </div>

        <hr />


        <div class="row">
            <div class="col col-md-8">
                <div class="row">
                    <div class="col-12">
                        <span>Home Team</span>
                        <div class="input-group">
                            <input @bind="@ViewModel.HomeTeam.Name" class="form-control" />
                            <input type="number" min="0" max="15" @bind="@ViewModel.HomeTeam.Score" class="form-control" />
                            <input type="text" @bind="@ViewModel.HomeTeam.Logo" class="form-control" placeholder="Team Logo URL" />
                            <input type="color" @bind="@ViewModel.HomeTeam.AccentColorHex" class="form-control" />
                        </div>
                        <hr />

                    </div>
                    <div class="col-12">
                        <span>Away Team</span>
                        <div class="input-group">
                            <input @bind="@ViewModel.AwayTeam.Name" class="form-control" />
                            <input type="number" min="0" max="15" @bind="@ViewModel.AwayTeam.Score" class="form-control" />
                            <input type="text" @bind="@ViewModel.AwayTeam.Logo" class="form-control" placeholder="Team Logo URL" />
                            <input type="color" @bind="@ViewModel.AwayTeam.AccentColorHex" class="form-control" />
                        </div>
                        <hr />
                    </div>
                </div>
                <div class="row">
                    <hr />
                    <div class="col">
                        <div>
                            <!-- Button trigger modal -->
                            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#editMatchStats">
                                Edit Match Stats
                            </button><p></p>
                            <!-- Button trigger modal -->
                            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#editLineups">
                                Edit Lineups
                            </button>
                        </div>
                        <hr />
                        <h3>Match Events</h3>
                        <div>
                            <div class="row">
                                <div class="col">
                                    <button class="btn btn-secondary" @onclick="@(async ()=>{
                                ViewModel.Clock = 0;
                                await StartTimer();
                                await EmitEvent(FootballEventsEnum.MatchStarted);

                            })" disabled="@(timer != null)">
                                        Kick Off
                                    </button>
                                    <button class="mx-1 btn btn-secondary" @onclick="@(async ()=>{
                                await StopTimer();
                                ViewModel.Clock = 45*60;
                                await EmitEvent(FootballEventsEnum.HalfTime);

                            })" disabled="@(timer == null)">
                                        Half Time
                                    </button>
                                    <button class="btn btn-secondary" @onclick="@(async ()=>{
                                await StopTimer();
                                ViewModel.Clock = 90*60;
                                await EmitEvent(FootballEventsEnum.MatchEnd);

                            })" disabled="@(timer == null)">
                                        Match End
                                    </button>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col mt-3">
                                    <button class="mx-1 btn btn-secondary"
                                            @onclick="@(async ()=>{
                                ViewModel.HomeTeam.Score++;
                                 await EmitEvent(FootballEventsEnum.GoalScored);

                            })">
                                        Goal (home team)
                                    </button>
                                    <button class="btn btn-secondary"
                                            @onclick="@(async ()=>{
                                ViewModel.AwayTeam.Score++;
                                await EmitEvent(FootballEventsEnum.GoalScored);

                            })">
                                        Goal (away team)

                                    </button> - <small><em>will play "goal" animation</em></small>
                                </div>
                            </div>
                        </div>
                       

                        @*this will open when  layout options  button is clicked*@
                        <Scoreboards.Features.Football.Manager.LayoutOptions.LayoutOptionsModal
                            Options="ViewModel.LayoutOptions">
                        </Scoreboards.Features.Football.Manager.LayoutOptions.LayoutOptionsModal>@*this will open when  edit stats button is clicked*@
                        <Scoreboards.Features.Football.Manager.MatchStats.EditStatsModal 
                            HomeTeam="ViewModel.HomeTeam"
                            AwayTeam="ViewModel.AwayTeam">
                        </Scoreboards.Features.Football.Manager.MatchStats.EditStatsModal>
                        @*this will open when edit lineups button is clicked*@
                        <Scoreboards.Features.Football.Manager.TeamLineup.EditLineupsModal
                            HomeTeam="ViewModel.HomeTeam"
                            AwayTeam="ViewModel.AwayTeam">
                        </Scoreboards.Features.Football.Manager.TeamLineup.EditLineupsModal>
                    </div>
                </div>


            </div>

            <div class="col col-md-4">
                <h3>@ViewModel.GetClockString()</h3>
                <hr />
                <div>
                    <button class="btn btn-primary" @onclick="StartTimer" disabled="@(timer != null)">Start Clock</button>
                    <button class="btn btn-primary" @onclick="StopTimer" disabled="@(timer == null)">Stop Clock</button>
                </div>
                <hr />
                @if (timer == null)
                {
                    <div class="row">
                        <div class="col">
                            <button class="btn btn-sm btn-secondary my-1" @onclick="()=>ViewModel.Clock+= 60">Increase Minutes</button>
                            <button class="btn btn-sm btn-secondary" @onclick="()=>ViewModel.Clock++">Increasee Seconds</button>
                        </div>
                        <div class="col">
                            @if (ViewModel.Clock >= 60)
                            {
                                <button class="btn btn-sm btn-secondary my-1" @onclick="()=>{if(ViewModel.Clock >= 60){ViewModel.Clock-=60;}}">Decrease Minutes</button>
                            }
                            @if (ViewModel.Clock > 0)
                            {
                                <button class="btn btn-sm btn-secondary" @onclick="()=>{if(ViewModel.Clock >= 0){ViewModel.Clock--;}}">Decrease Seconds</button>
                            }
                        </div>
                    </div>
                }

            </div>
        </div>
    </div>
</div>
@*debug
    <div>
    token: @Token
    @if (hubConnection != null && hubConnection.ConnectionId != null) {
    <span>@hubConnection.ConnectionId</span>
    }
    else {
    <span>wait...</span>
    }
    </div>*@


@code {
    public void Dispose()
    {
        // kill connection with current token when this tab/window is closed //
        if (hubConnection != null)
        {
            Task.Run(async () => { await hubConnection.DisposeAsync(); });
        }
    }
    //signalr stuff//

    private HubConnection? hubConnection;
    //properties
    private string ConnectionToken { get; set; } = Guid.NewGuid().ToString();

    public FootballScoreboardViewModel ViewModel { get; set; } = new FootballScoreboardViewModel();
    // this timer will be run to send data to output //
    System.Threading.Timer? dataSyncTimer;

    //this is game clock
    System.Threading.Timer? timer;

    private void SetClock(object stateInfo)
    {
        // increment seconds count of viewmodel //
        ViewModel.Clock = ViewModel.Clock + 1;

        InvokeAsync(StateHasChanged); // MUST CALL StateHasChanged() BECAUSE THIS IS TRIGGERED BY A TIMER INSTEAD OF A USER EVENT
    }
    private void SyncScoreboardData(object stateInfo)
    {
        if (hubConnection != null)
        {
            // send data to output each seconds, this is important because of clock //
            Task.Run(async () =>
                {
                    await RefreshOutputData();
                }
            );
        }
        InvokeAsync(StateHasChanged); // MUST CALL StateHasChanged() BECAUSE THIS IS TRIGGERED BY A TIMER INSTEAD OF A USER EVENT
    }
    public async Task StartTimer()
    {
        if (timer == null)
        {
            // run timer every second
            timer = new System.Threading.Timer(SetClock, new System.Threading.AutoResetEvent(false), 10, 1000); //
        }
    }

    public async Task StopTimer()
    {
        if (timer != null)
        {
            timer.Dispose();
            timer = null;
        }
    }

    public async Task RefreshOutputData()
    {
        if (hubConnection != null)
        {
            await hubConnection.SendAsync("SendMessage",
              new KeyValuePair<string, FootballScoreboardViewModel>(ConnectionToken, ViewModel)
          );
        }
    }

    public void SetupDataSyncTimer()
    {
        if (dataSyncTimer == null)
        {
            // run timer every second
            dataSyncTimer = new System.Threading.Timer(SyncScoreboardData, new System.Threading.AutoResetEvent(false), 10, 1000); //
        }
    }

    // match events

    public async Task EmitEvent(FootballEventsEnum eventType)
    {
        if(hubConnection!=null)
        {
            await hubConnection.SendAsync("EmitEvent",
            new KeyValuePair<string, FootballEventsEnum>(ConnectionToken, eventType)
            );
           
        }
    }

    //life cycle events//
    protected override async Task OnInitializedAsync()
    {

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/scoreboards/football"))
        .Build();

        await hubConnection.StartAsync();

        // start output updates once app is started //
        SetupDataSyncTimer();
    }

   








}
