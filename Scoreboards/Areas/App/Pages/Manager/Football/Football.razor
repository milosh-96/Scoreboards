@page "/manager/football"
@using Microsoft.AspNetCore.SignalR.Client;
@using Models.Football;
@using Scoreboards.Areas.App.Pages.Manager.Football.Components
@using Scoreboards.Areas.App.Pages.Output.Football.Layouts;
@using Scoreboards.Data.Football;
@implements IDisposable;
@inject NavigationManager Navigation
<div class="container">
    <div class="alert alert-warning">
        Do not close this tab/window. Closing of this tab/window will stop all outputs
        with current token.
    </div>
    <div>
        <h3>Football</h3>
        <div class="row">
<div class="col">
                <div class="input-group">
                    <select class="form-control" @bind="ViewModel.LayoutPreset">
                        <option value="1">Layout Preset 1</option>
                        <option value="2">Layout Preset 2 (Anfield-like)</option>
                    </select>
                </div>
                <!-- Button trigger modal -->
                <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#layoutOptions">
                    Layout Options
                </button><p></p>
                <div class="modal modal-xl fade" id="layoutOptions" tabindex="-1" aria-labelledby="layoutOptionsLabel" aria-hidden="true">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h1 class="modal-title fs-5" id="layoutOptionsLabel">Layout options</h1>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <div class="row">
                                    <div class="col">
                                        <LayoutOptions Options="ViewModel.LayoutOptions"></LayoutOptions>
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            </div>
                        </div>
                    </div>
                </div>
</div>
<div class="col">
                <a class="btn btn-primary" href="/scoreboard/football/@ConnectionToken" target="_blank">Open Output</a>

</div>
</div>
      
    <hr />


    <div class="row">
        <div class="col col-md-8">
            <div class="row">
                <div class="col-12">
                    <span>Home Team</span>
                   <div class="input-group">
                        <input @bind="@ViewModel.HomeTeam.Name" class="form-control" />
                        <input type="number" min="0" max="15" @bind="@ViewModel.HomeTeam.Score" class="form-control" />
                        <input type="text" @bind="@ViewModel.HomeTeam.Logo" class="form-control" placeholder="Team Logo URL" />
                        <input type="color" @bind="@ViewModel.HomeTeam.AccentColorHex" class="form-control" />
                    </div>
                    <hr />

                </div>
                <div class="col-12">
                    <span>Away Team</span>
                    <div class="input-group">
                        <input @bind="@ViewModel.AwayTeam.Name" class="form-control" />
                        <input type="number" min="0" max="15" @bind="@ViewModel.AwayTeam.Score" class="form-control" />
                        <input type="text" @bind="@ViewModel.AwayTeam.Logo" class="form-control" placeholder="Team Logo URL" />
                        <input type="color" @bind="@ViewModel.AwayTeam.AccentColorHex" class="form-control" />
                    </div>
                        <hr />
                </div>
            </div>
            <div class="row">
                    <hr />
                <div class="col">
                       <div>
                            <!-- Button trigger modal -->
                            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#editMatchStats">
                                Edit Match Stats
                            </button><p></p>
                            <!-- Button trigger modal -->
                            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#editLineups">
                                Edit Lineups
                            </button>
                       </div>
                        <!-- Modal -->
                        <div class="modal modal-xl fade" id="editMatchStats" tabindex="-1" aria-labelledby="editMatchStatsLabel" aria-hidden="true">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h1 class="modal-title fs-5" id="editMatchStatsLabel">Edit Match Stats</h1>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body">
                                        <div class="row">
                                            <div class="col">
                                                <MatchStats HomeTeam="ViewModel.HomeTeam"
                                                            AwayTeam="ViewModel.AwayTeam"></MatchStats>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                    </div>
                                </div>
                            </div>
                        </div>

                      

                        <!-- Modal -->
                        <div class="modal modal-xl fade" id="editLineups" tabindex="-1" aria-labelledby="editLineupsLabel" aria-hidden="true">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h1 class="modal-title fs-5" id="editLineupsLabel">Edit Lineups</h1>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body">
                                        <div class="row">
                                            <div class="col">
                                                <TeamLineup Team="ViewModel.HomeTeam"></TeamLineup>
                                            </div>
                                            <div class="col">
                                                <TeamLineup Team="ViewModel.AwayTeam"></TeamLineup>

                                            </div>
                                        </div>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                </div>      
            </div>
                        
                    
        </div>
            
        <div class="col col-md-4">
                <h3>@ViewModel.GetClockString()</h3>
            <hr />
                <div>
                    <button class="btn btn-primary" @onclick="StartTimer" disabled="@(timer != null)">Start Clock</button>
                    <button class="btn btn-primary" @onclick="StopTimer" disabled="@(timer == null)">Stop Clock</button>
                </div>
                <hr />
            @if(timer == null)
            {
               <div class="row">
                       <div class="col">
                            <button class="btn btn-sm btn-secondary my-1" @onclick="()=>ViewModel.Clock+= 60">Increase Minutes</button>
                            <button class="btn btn-sm btn-secondary" @onclick="()=>ViewModel.Clock++">Increasee Seconds</button>
                       </div>
                        <div class="col">
                            @if (ViewModel.Clock >= 60)
                            {
                                <button class="btn btn-sm btn-secondary my-1" @onclick="()=>{if(ViewModel.Clock >= 60){ViewModel.Clock-=60;}}">Decrease Minutes</button>
                            }
                            @if (ViewModel.Clock > 0)
                            {
                                <button class="btn btn-sm btn-secondary" @onclick="()=>{if(ViewModel.Clock >= 0){ViewModel.Clock--;}}">Decrease Seconds</button>
                            }
                        </div>
               </div>
            }
           
        </div>
    </div>
    </div>
    </div>
   @*debug
    <div>
    token: @Token
    @if (hubConnection != null && hubConnection.ConnectionId != null) {
    <span>@hubConnection.ConnectionId</span>
    }
    else {
    <span>wait...</span>
    }
    </div>*@


@code {
    public void Dispose()
    { 
        // kill connection with current token when this tab/window is closed //
        if(hubConnection != null)
        {
            Task.Run(async()=> { await hubConnection.DisposeAsync(); });
        }
    }
    //signalr stuff//

    private HubConnection? hubConnection;
    //properties
    private string ConnectionToken { get; set; } = Guid.NewGuid().ToString();

    public FootballScoreboardViewModel ViewModel { get; set; } = new FootballScoreboardViewModel();
    System.Threading.Timer? dataSyncTimer;
    System.Threading.Timer? timer;

    private void SetClock(object stateInfo)
    {
        // increment seconds count of viewmodel //
        ViewModel.Clock = ViewModel.Clock + 1;
        
        InvokeAsync(StateHasChanged); // MUST CALL StateHasChanged() BECAUSE THIS IS TRIGGERED BY A TIMER INSTEAD OF A USER EVENT
    }
    private void SyncScoreboardData(object stateInfo)
    {
        if (hubConnection != null)
        {
            // send data to output each seconds, this is important because of clock //
            Task.Run(async () =>
                {
                    await RefreshOutputData();
                }
            );
        }
        InvokeAsync(StateHasChanged); // MUST CALL StateHasChanged() BECAUSE THIS IS TRIGGERED BY A TIMER INSTEAD OF A USER EVENT
    }
    public async Task StartTimer(MouseEventArgs e)
    {
        if(timer == null) {
            // run timer every second
            timer = new System.Threading.Timer(SetClock, new System.Threading.AutoResetEvent(false), 10, 1000); //
        }
    }

    public async Task StopTimer()
    {
        if(timer != null)
        {
            timer.Dispose();
            timer = null;
        }
    }

    public async Task RefreshOutputData()
    {
        if(hubConnection != null)
        {
            await hubConnection.SendAsync("SendMessage",
              new KeyValuePair<string, FootballScoreboardViewModel>(ConnectionToken, ViewModel)
          );
        }
    }

   
    //life cycle events//
    protected override async Task OnInitializedAsync()
    {

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/scoreboards/football"))
        .Build();       

        await hubConnection.StartAsync();

        if (dataSyncTimer == null)
        {
            // run timer every second
            dataSyncTimer = new System.Threading.Timer(SyncScoreboardData, new System.Threading.AutoResetEvent(false), 10, 1000); //
        }
    }








    
    
}
