@using Microsoft.AspNetCore.SignalR.Client;
@using Scoreboards.Data.Football;
@if (ActiveEvent != null)
{
    var containerClass = "boxed";

    if(FullScreenMode)
    {
        containerClass = "full-screen-overlay";
    }
    <div class="@containerClass">
        @{
            var word = "";
        }

        @switch (ActiveEvent)
        {
            case FootballEventsEnum.GoalScored:
                word = "Goal!";
                break;
            case FootballEventsEnum.MatchStarted:
                word = "Kick-Off!";
                break;
            case FootballEventsEnum.HalfTime:
                word = "Half Time";
                break; 
            case FootballEventsEnum.MatchEnd:
                word = "Match End";
                if (HomeTeam.Score > AwayTeam.Score)
                {
                    word = "Match End - WIN!";
                }
                break;
        }
        <div>
            <h1 class="ml14">
                <span class="letters">
                    @word
                </span>
                <span class="line"></span>
            </h1>

        </div>
    </div>
}

@code {
    // this is needed so we can sync this component with the manager //
    [Parameter]
    public HubConnection? HubConnection { get; set; }
    //
    [Parameter]
    public FootballTeam HomeTeam { get; set; } = new FootballTeam();

    [Parameter]
    public FootballTeam AwayTeam { get; set; } = new FootballTeam();

    public FootballEventsEnum? ActiveEvent { get; set; }

    [Parameter]
    public bool FullScreenMode { get; set; } = false;

    protected async override Task OnInitializedAsync()
    {
        if (HubConnection != null)
        {
            HubConnection.On<FootballEventsEnum>("EmittedEvent", async (FootballEventsEnum eventType) =>
    {
        switch (eventType)
        {
            case FootballEventsEnum.GoalScored:
                ActiveEvent = FootballEventsEnum.GoalScored;
                await InvokeAsync(StateHasChanged);
                await Task.Delay(TimeSpan.FromSeconds(60));
                ActiveEvent = null;
                await InvokeAsync(StateHasChanged);
                break;
            case FootballEventsEnum.MatchStarted:
                ActiveEvent = FootballEventsEnum.MatchStarted;
                await InvokeAsync(StateHasChanged);
                await Task.Delay(TimeSpan.FromSeconds(15));
                ActiveEvent = null;
                await InvokeAsync(StateHasChanged);
                break;
            case FootballEventsEnum.HalfTime:
                ActiveEvent = FootballEventsEnum.HalfTime;
                await InvokeAsync(StateHasChanged);
                await Task.Delay(TimeSpan.FromSeconds(15));
                ActiveEvent = null;
                await InvokeAsync(StateHasChanged);
                break;
           case FootballEventsEnum.MatchEnd:
                ActiveEvent = FootballEventsEnum.MatchEnd;
                await InvokeAsync(StateHasChanged);
                await Task.Delay(TimeSpan.FromSeconds(30));
                ActiveEvent = null;
                await InvokeAsync(StateHasChanged);
                break;
        }
    });
        }
    }
}
    <style >
    .full-screen-overlay {
        min-height: 100vh;
        position: absolute;
        background: @HomeTeam.AccentColorHex;
        left: 0;
        right: 0;
        top: 0;
        bottom: 0;
        z-index: 9999;
    }

    .ml14 {
        font-weight: 200;
        font-size: 128px;
        padding-top: 15vh;
        text-align: center;
    }

        .ml14 .text-wrapper {
            position: relative;
            display: inline-block;
            padding-top: 0.1em;
            padding-right: 0.05em;
            padding-bottom: 0.15em;
        }

        .ml14 .line {
            opacity: 0;
            position: absolute;
            left: 0;
            height: 2px;
            width: 100%;
            background-color: #fff;
            transform-origin: 100% 100%;
            bottom: 0;
        }

        .ml14 .letter {
            display: inline-block;
            line-height: 1em;
        }

</style>
