@page "/scoreboard/football/{token}"
@using Microsoft.AspNetCore.SignalR.Client;
@using Scoreboards.Areas.App.Pages.Output.Football.Layouts
@using Scoreboards.Data.Football;
@using Scoreboards.Models.Football;
@using System.Drawing;
@inject IJSRuntime jsRuntime;
@inject NavigationManager Navigation

<div>
    @if(ActiveEvent != null)
    {
       <div class="full-screen-overlay">
            @{var word = "";}

            @switch (ActiveEvent)
            {
                case FootballEventsEnum.GoalScored:
                    word = "Goal!";
                    <div>
                        <h1 class="ml14">
                           <span class="letters">
                                @word
                           </span>
                            <span class="line"></span>
                        </h1>

                    </div>
                    break;
                case FootballEventsEnum.MatchStarted:
                    word = "Kick-Off!";
                    <div>
                        <h1 class="ml14">
                           <span class="letters">
                                @word
                           </span>
                            <span class="line"></span>
                        </h1>

                    </div>
                    break;
            }
       </div>
    }
    @switch(ViewModel.LayoutPreset)
    {
        case 2:
            <VerticalLayoutWithClock ViewModel="ViewModel"></VerticalLayoutWithClock>
        break;
        case 1:
        default:
            <HorizontalLayoutWithLineupsAndClock ViewModel="ViewModel"></HorizontalLayoutWithLineupsAndClock>
        break;
    }
</div>

@code {

    [Parameter]
    public string Token { get; set; } = "";

    //signalr stuff//
    private HubConnection? hubConnection;
    //properties
    public string? ConnectionId { get; set; }

    public FootballScoreboardViewModel ViewModel { get; set; } = new FootballScoreboardViewModel();

    // dynamic component stuff //
    public FootballEventsEnum? ActiveEvent { get; set; }

    //life cycle events//
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/scoreboards/football"))
            .Build();

        hubConnection.On<KeyValuePair<string,FootballScoreboardViewModel>>("UpdateData", (item) =>
        {


            if(item.Key == Token) {
                ViewModel = item.Value;
            }
            InvokeAsync(StateHasChanged);

        });
        hubConnection.On<FootballEventsEnum>("EmittedEvent", async (FootballEventsEnum eventType) =>
        {
            switch(eventType)
            {
                case FootballEventsEnum.GoalScored:
                    ActiveEvent = FootballEventsEnum.GoalScored;
                    InvokeAsync(StateHasChanged);
                    await jsRuntime.InvokeVoidAsync("goalEvent");
                    await Task.Delay(TimeSpan.FromSeconds(60));
                    ActiveEvent = null;
                    InvokeAsync(StateHasChanged);
                    break;
                case FootballEventsEnum.MatchStarted:
                    ActiveEvent = FootballEventsEnum.MatchStarted;
                    InvokeAsync(StateHasChanged);
                    await jsRuntime.InvokeVoidAsync("goalEvent");
                    await Task.Delay(TimeSpan.FromSeconds(15));
                    ActiveEvent = null;
                    InvokeAsync(StateHasChanged);
                    break;
            }

        });

        await hubConnection.StartAsync();
    }


    // events
}

        <style>
            .full-screen-overlay {
      min-height:100vh;
        position: absolute;
        background: @ViewModel.HomeTeam.AccentColorHex;
        left: 0;
        right: 0;
        top: 0;
        bottom: 0;
        z-index: 9999;
            }

    .ml14 {
        font-weight: 200;
        font-size: 256px;
        padding-top:15vh;
        text-align: center;
    }

        .ml14 .text-wrapper {
            position: relative;
            display: inline-block;
            padding-top: 0.1em;
            padding-right: 0.05em;
            padding-bottom: 0.15em;
        }

        .ml14 .line {
            opacity: 0;
            position: absolute;
            left: 0;
            height: 2px;
            width: 100%;
            background-color: #fff;
            transform-origin: 100% 100%;
            bottom: 0;
        }

        .ml14 .letter {
            display: inline-block;
            line-height: 1em;
        }

        </style>