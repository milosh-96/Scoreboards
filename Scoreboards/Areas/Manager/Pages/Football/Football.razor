@page "/manager/football"
@using Microsoft.AspNetCore.SignalR.Client;
@using Models.Football;
@using Scoreboards.Areas.Manager.Pages.Football.Components
@using Scoreboards.Data.Football;
@implements IDisposable;
@inject NavigationManager Navigation
<div class="container">
    <div class="alert alert-warning">
        Do not close this tab/window. Closing of this tab/window will stop all outputs
        with current token.
    </div>
    <div>
        <h3>Football</h3>
        <a class="btn btn-primary" href="/scoreboard/football/@ConnectionToken" target="_blank">Open Output</a>

    </div>
    <hr />


    <div class="row">
        <div class="col col-md-8">
            <div class="row">
                <div class="col-12">
                   <div class="input-group">
                        <input @bind="@ViewModel.HomeTeam.Name" class="form-control" />
                        <input type="number" min="0" max="15" @bind="@ViewModel.HomeTeam.Score" class="form-control" />
                        <input type="text" @bind="@ViewModel.HomeTeam.Logo" class="form-control" />
                        <input type="color" @bind="@ViewModel.HomeTeam.AccentColorHex" class="form-control" />
                        <hr />

                    </div>
                </div>
                <div class="col-12">
                    <div class="input-group">
                        <input @bind="@ViewModel.AwayTeam.Name" class="form-control" />
                        <input type="number" min="0" max="15" @bind="@ViewModel.AwayTeam.Score" class="form-control" />
                        <input type="text" @bind="@ViewModel.AwayTeam.Logo" class="form-control" />
                        <input type="color" @bind="@ViewModel.AwayTeam.AccentColorHex" class="form-control" />
                    </div>
                </div>
            </div>
            <div class="col-12">
                <h3>Stats</h3>

                @{
                    var homeStats = ViewModel.HomeTeam.Stats;
                    var awayStats = ViewModel.AwayTeam.Stats;
                }
                <table class="table">
                    <tr>
                        <td><input @bind="@homeStats.Possession" class="form-control" /></td>
                        <td>Possesion</td>
                        <td><input @bind="@awayStats.Possession" class="form-control" /></td>
                    </tr>
                    <tr>
                        <td><input @bind="@homeStats.Passes" class="form-control" /></td>
                        <td>Passes</td>
                        <td><input @bind="@awayStats.Passes" class="form-control" /></td>
                    </tr>
                    <tr>
                        <td><input @bind="@homeStats.CompletedPasses" class="form-control" /></td>
                        <td>Completed Passes</td>
                        <td><input @bind="@awayStats.CompletedPasses" class="form-control" /></td>
                    </tr>

                     <tr>
                        <td><input @bind="@homeStats.Shots" class="form-control" /></td>
                        <td>Shots</td>
                        <td><input @bind="@awayStats.Shots" class="form-control" /></td>
                    </tr>
                    <tr>
                        <td><input @bind="@homeStats.ShotsOnTarget" class="form-control" /></td>
                        <td>Shots (on target)</td>
                        <td><input @bind="@awayStats.ShotsOnTarget" class="form-control" /></td>
                    </tr>
                    <tr>
                        <td><input @bind="@homeStats.CornerKicks" class="form-control" /></td>
                        <td>Corner Kicks</td>
                        <td><input @bind="@awayStats.CornerKicks" class="form-control" /></td>
                    </tr>
                    <tr>
                        <td><input @bind="@homeStats.FreeKicks" class="form-control" /></td>
                        <td>Free Kicks</td>
                        <td><input @bind="@awayStats.FreeKicks" class="form-control" /></td>
                    </tr>
                    <tr>
                        <td><input @bind="@homeStats.Penalties" class="form-control" /></td>
                        <td>Penalties</td>
                        <td><input @bind="@awayStats.Penalties" class="form-control" /></td>
                    </tr>
                    <tr>
                        <td><input @bind="@homeStats.Fouls" class="form-control" /></td>
                        <td>Fouls</td>
                        <td><input @bind="@awayStats.Fouls" class="form-control" /></td>
                    </tr>
                    <tr>
                        <td><input @bind="@homeStats.Offsides" class="form-control" /></td>
                        <td>Offsides</td>
                        <td><input @bind="@awayStats.Offsides" class="form-control" /></td>
                    </tr>
                    <tr>
                        <td><input @bind="@homeStats.YellowCards" class="form-control" /></td>
                        <td>Yellow Cards</td>
                        <td><input @bind="@awayStats.YellowCards" class="form-control" /></td>
                    </tr>
                    <tr>
                        <td><input @bind="@homeStats.RedCards" class="form-control" /></td>
                        <td>Red Cards</td>
                        <td><input @bind="@awayStats.RedCards" class="form-control" /></td>
                    </tr>
                   
                   
                </table>
                <hr />
                
                <div class="row">
                    <div class="col">
                        
                      <TeamLineup Team="ViewModel.HomeTeam"></TeamLineup>
                    </div>
                    <div class="col">
                        <TeamLineup Team="ViewModel.AwayTeam"></TeamLineup>

                    </div>
                </div>
            </div>
        </div>
        @*Tools*@
        <div class="col col-md-4">
                <button class="btn btn-primary" @onclick="StartTimer" disabled="@(timer != null)">Start Clock</button>
                <button class="btn btn-primary" @onclick="StopTimer" disabled="@(timer == null)">Stop Clock</button>
                <hr />
            @if(timer == null)
            {
                <button class="btn btn-primary" @onclick="RefreshOutputData">Refresh Output</button>
            }
            <h3>@ViewModel.GetClockString()</h3>
        </div>
    </div>
   @*debug
    <div>
    token: @Token
    @if (hubConnection != null && hubConnection.ConnectionId != null) {
    <span>@hubConnection.ConnectionId</span>
    }
    else {
    <span>wait...</span>
    }
    </div>*@
</div>


@code {
    public void Dispose()
    { 
        // kill connection with current token when this tab/window is closed //
        if(hubConnection != null)
        {
            Task.Run(async()=> { await hubConnection.DisposeAsync(); });
        }
    }
    //signalr stuff//

    private HubConnection? hubConnection;
    //properties
    private string ConnectionToken { get; set; } = Guid.NewGuid().ToString();

    public FootballScoreboardViewModel ViewModel { get; set; } = new FootballScoreboardViewModel();
    System.Threading.Timer? timer;

    private void SetClock(object stateInfo)
    {
        // increment seconds count of viewmodel //
        ViewModel.Clock = ViewModel.Clock + 1;
        if (hubConnection != null)
        {
            // send data to output each seconds, this is important because of clock //
            Task.Run(async () =>
            {
                await RefreshOutputData();
            }
        );
        }
        InvokeAsync(StateHasChanged); // MUST CALL StateHasChanged() BECAUSE THIS IS TRIGGERED BY A TIMER INSTEAD OF A USER EVENT
    }
    public async Task StartTimer(MouseEventArgs e)
    {
        if(timer == null) {
            // run timer every second
            timer = new System.Threading.Timer(SetClock, new System.Threading.AutoResetEvent(false), 10, 1000); //
        }
    }

    public async Task StopTimer()
    {
        if(timer != null)
        {
            timer.Dispose();
            timer = null;
        }
    }

    public async Task RefreshOutputData()
    {
        if(hubConnection != null)
        {
            await hubConnection.SendAsync("SendMessage",
              new KeyValuePair<string, FootballScoreboardViewModel>(ConnectionToken, ViewModel)
          );
        }
    }

    //life cycle events//
    protected override async Task OnInitializedAsync()
    {

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/scoreboards/football"))
        .Build();       

        await hubConnection.StartAsync();
    }








    
    
}
